<div>
    <div class="flex justify-between items-center mb-5">
        <h3 class="text-xl font-bold mb-5">Chỉnh sửa sản phẩm</h3>
    </div>
 
     <div>
        <form id="create-product-form" action="/admin/product/edit" method="post" enctype="multipart/form-data">

            <input type="hidden" name="retainedImages" id="retainedImages" value="<%= product.danhSachHinhAnh.join(',') %>" />
            <input type="text" name="productId" value="<%= product.maSanPham.toString() %>" hidden>
            
            <div class="grid grid-cols-12 gap-5">
                 <div class="col-span-8">
                     <section>
                         <label class="form-control w-full max-w-full mb-4">
                             <div class="label">
                                 <span class="label-text">Nhập tên sản phẩm</span>
                             </div>
                             <input value="<%= product.tenSanPham %>" id="name" name="name" type="text" class="input input-bordered w-full max-w-full" />
                         </label>
                     </section>
                 </div>
                 <div class="col-span-4">
                     <section>
                         <label class="form-control w-full">
                             <div class="label">
                                 <span class="label-text">Chọn hãng sản xuất</span>
                             </div>
                             <select name="brand" class="select select-bordered">
                                 <% if (brands && brands.length > 0) { %>
                                     <% brands.forEach(brand => { %>
                                         <option value="<%= brand.maHangSanXuat %>" <%= product.maHangSanXuat.maHangSanXuat.toString() == brand.maHangSanXuat.toString() ? 'selected' : '' %>>
                                            <%= brand.tenHangSanXuat %>
                                        </option>
                                     <% }) %>
                                 <% } %>
                             </select>
                         </label>
                     </section>
                 </div>
            </div>
             <label class="form-control mb-5">
                 <div class="label">
                     <span class="label-text">Nhập mô tả sản phẩm</span>
                 </div>
                 <textarea name="description" id="description" class="textarea textarea-bordered h-24"><%= product.moTaSanPham %></textarea>
             </label>
 
             <div class="grid grid-cols-12 gap-5 mt-10">
                 <section class="col-span-4">
                     <p class="mb-5">Chọn danh mục cho sản phẩm</p>
                     <ul>
                         <% if (categories && categories.length > 0) { %>
                             <% categories.forEach(category => { %>
                                 <li class="flex items-center gap-3 mb-5 last:mb-0">
                                     <input type="checkbox" 
                                         id="category-<%= category.maDanhMuc %>" 
                                         name="category[]" 
                                         value="<%= category.maDanhMuc %>" 
                                         class="checkbox checkbox-sm [--chkbg:#0578f8]"
                                         <%= product.danhSachDanhMuc.some(d => d.maDanhMuc.toString() === category.maDanhMuc.toString()) ? 'checked' : '' %> 
                                     />
                                     <label class="cursor-pointer" for="category-<%= category.maDanhMuc %>">
                                         <%= category.tenDanhMuc %>
                                     </label>
                                 </li>
                             <% }) %>
                         <% } else { %>
                             <li class="mb-3">Không có danh mục nào.</li>
                         <% } %>
                     </ul>
                 </section>
                 <section class="col-span-8">
                     <p class="mb-5">Chọn kích cỡ cho sản phẩm</p>
                     <ul id="size-list">
                         <% if (sizes && sizes.length > 0) { %>
                             <% sizes.forEach(size => { %>
                                 <li class="flex items-center justify-between mb-5 last:mb-0 gap-5">
                                     <div class="flex items-center gap-3">
                                         <input type="checkbox" 
                                             id="size-<%= size.maKichCo %>" 
                                             name="sizes[<%= size.maKichCo %>][maKichCo]" 
                                             value="<%= size.maKichCo %>" 
                                             class="checkbox checkbox-sm [--chkbg:#0578f8]" 
                                             <%= product.danhSachKichCo.some(d => d.maKichCo.maKichCo.toString() === size.maKichCo.toString()) ? 'checked' : '' %>
                                         />
                                         <label class="cursor-pointer" for="size-<%= size.maKichCo %>">
                                             Kích cỡ <%= size.tenKichCo %>
                                         </label>
                                     </div>

                                    <div class="flex-1 flex items-center gap-5">
                                        <label for="" class="flex-1 text-right">Số lượng</label>
                                        <input 
                                            type="number" 
                                            min="0"
                                            value="<%= product.danhSachKichCo.find(d => d.maKichCo.maKichCo.toString() === size.maKichCo.toString())?.soLuongKichCo || 0 %>" 
                                            name="sizes[<%= size.maKichCo %>][soLuongKichCo]" 
                                            class="input input-sm input-bordered">
                                    </div>
 
                                     <div class="flex-1 flex items-center gap-5">
                                         <label for="" class="flex-1 text-right">Giá kích cỡ</label>
                                         <input 
                                            data-sizePrice="<%= product.danhSachKichCo.find(d => d.maKichCo.maKichCo.toString() === size.maKichCo.toString())?.giaKichCo || '' %>" 
                                            disabled type="text" 
                                            class="input input-sm input-bordered">
                                         <input value="<%= product.danhSachKichCo.find(d => d.maKichCo.maKichCo.toString() === size.maKichCo.toString())?.giaKichCo || '' %>" type="text" name="sizes[<%= size.maKichCo %>][giaKichCo]" hidden>
                                     </div>
                                    
                                 </li>
                             <% }) %>
                         <% } else { %>
                             <li class="mb-3">Không có kích cỡ nào.</li>
                         <% } %>
                     </ul>
                 </section>
             </div>
 
             <div class="grid grid-cols-12 gap-5 mt-20">
                 <section class="col-span-5">
                     <div class="flex items-center gap-2 mb-5">
                         <p>Chọn hình ảnh đại diện</p>
     
                         <label class="btn btn-sm" for="product-image-thumbnail">
                             <i class='bx bx-upload'></i>
                             Thêm
                         </label>
                     </div>
                    
                     <ul id="uploadImageThumnail" data-thumbnail="<%= product.hinhAnhDaiDien %>">
                         <input id="product-image-thumbnail" name="productImageThumbnail" hidden type="file" accept="image/png, image/jpeg" />
                    
                         <li>
                             <div class="preview-image relative group border rounded-2xl h-full">
                                <div class="aspect-h-1 aspect-w-1 w-full h-full overflow-hidden rounded-2xl xl:aspect-h-8 xl:aspect-w-7">
                                    <img src="<%= product.hinhAnhDaiDien %>" class="h-[400px] w-full object-cover object-center group-hover:opacity-75" />
                                </div>
                                <button data-url="<%= product.hinhAnhDaiDien %>" type="button" class="btn-remove-thumbnail-image btn btn-circle btn-sm absolute top-2 right-2 bg-white bg-opacity-50 rounded-full">
                                    <i class="bx bx-x"></i>
                                </button>
                            </div>
                         </li>
                     </ul>
                 </section>
     
                 <section class="col-span-7">
                     <!-- <p class="mb-5">Chọn danh sách hình ảnh</p> -->
 
                     <div class="flex items-center gap-2 mb-5">
                         <p>Chọn danh sách hình ảnh</p>
     
                         <label class="btn btn-sm" for="product-image-files">
                             <i class='bx bx-upload'></i>
                             Thêm
                         </label>
                     </div>
 
                     <ul id="uploadImages" class="grid grid-cols-4 gap-2 max-h-[400px] overflow-y-auto scrollbar">
                         <input id="product-image-files" name="productImageFiles" hidden type="file" accept="image/png, image/jpeg" multiple />
                         
                        <% if (product.danhSachHinhAnh && product.danhSachHinhAnh.length > 0) { %>
                            <% product.danhSachHinhAnh.forEach((image, index) => { %>
                                <li>
                                    <div class="preview-image relative group border rounded-2xl h-full">
                                        <div class="aspect-h-1 aspect-w-1 w-full h-full overflow-hidden rounded-2xl xl:aspect-h-8 xl:aspect-w-7">
                                            <img src="<%= image %>" class="h-full w-full object-cover object-center group-hover:opacity-75" />
                                        </div>
                                        <button data-index="<%= index %>" type="button" class="btn-remove-preview-image btn btn-circle btn-sm absolute top-2 right-2 bg-white bg-opacity-50 rounded-full">
                                            <i class="bx bx-x"></i>
                                        </button>
                                    </div>
                                </li>
                            <% }) %>
                        <% } %>
                     </ul>
                 </section>
             </div>
 
             <section class="mt-14">
                 <button class="w-full btn btn-lg bg-primary text-white hover:bg-primary rounded-xl">
                     Cập nhật sản phẩm
                 </button>
             </section>
        </form>
     </div>
 </div>
 
 <script src="https://unpkg.com/just-validate@latest/dist/just-validate.production.min.js"></script>
 <script>
     const validation = new JustValidate("#create-product-form");
     validation
         .addField("#name", [
             {
                 rule: "required",
                 errorMessage: "Tên sản phẩm là bắt buộc",
             },
             {
                 rule: "maxLength",
                 value: 255,
                 errorMessage: "Tên sản phẩm không được vượt quá 255 ký tự",
             },
         ])
         .addField("#description", [
             {
                 rule: "required",
                 errorMessage: "Mô tả sản phẩm là bắt buộc",
             },
         ]);
 
     validation.onSuccess((event) => {
        //  if (productImageInputFiles.files.length === 0) {
        //      alert("Vui lòng chọn ít nhất một hình ảnh sản phẩm");
        //      return;
        //  }
 
        //  if (productImageThumbnailInputFile.files.length === 0) {
        //      alert("Vui lòng chọn hình ảnh đại diện cho sản phẩm");
        //      return;
        //  }
 
         // Kiểm tra nếu đã check kích cỡ thì phải nhập giá
         const sizeCheckboxes = document.querySelectorAll("#size-list input[type='checkbox']");
         const sizePrices = document.querySelectorAll("#size-list input[type='text']:not([hidden])");
        
         let isInValid = false;
         
         for (let i = 0; i < sizeCheckboxes.length; i++) {
             const checkbox = sizeCheckboxes[i];
             const priceInput = sizePrices[i];
 
             if (checkbox.checked && priceInput.value.trim() === "") {
                 isInValid = true;
                 break;
             }
         }
         if (isInValid) {
             alert("Vui lòng nhập giá cho kích cỡ đã chọn");
             return;
         }
 
         event.target.submit(); // Gửi form khi không có lỗi
     });
 </script>
 
 <script>
    const productImageInputFiles = document.getElementById("product-image-files");
    const productImageUploads = document.getElementById("uploadImages");

    const productImageThumbnailInputFile = document.getElementById("product-image-thumbnail");
    const productImageThumbnailUpload = document.getElementById("uploadImageThumnail");
    const retainedImagesInput = document.getElementById("retainedImages");

    const fileListTransfer = new DataTransfer();

    const updateRetainedImages = () => {
        const retainedUrls = [];
        const images = document.querySelectorAll("#uploadImages img");
        images.forEach((img) => {
            retainedUrls.push(img.src);
        });
        retainedImagesInput.value = retainedUrls.join(",");
    };

    // Render image files (add to existing list)
    const renderImageFiles = (files) => {
        for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader();

            reader.onload = (e) => {
                const li = document.createElement("li");
                li.innerHTML = `
                    <div class="preview-image relative group border rounded-2xl h-full">
                        <div class="aspect-h-1 aspect-w-1 w-full h-full overflow-hidden rounded-2xl xl:aspect-h-8 xl:aspect-w-7">
                            <img src="${e.target.result}" class="h-full w-full object-cover object-center group-hover:opacity-75" />
                        </div>
                        <button data-index="${fileListTransfer.items.length - 1}" type="button" class="btn-remove-preview-image btn btn-circle btn-sm absolute top-2 right-2 bg-white bg-opacity-50 rounded-full">
                            <i class="bx bx-x"></i>
                        </button>
                    </div>
                `;

                productImageUploads.appendChild(li);

                // Add event to remove button
                const removeBtn = li.querySelector(".btn-remove-preview-image");
                removeBtn.addEventListener("click", function () {
                    const removeIndex = parseInt(this.getAttribute("data-index"));

                    fileListTransfer.items.remove(removeIndex);
                    li.remove();

                    // Update input files
                    productImageInputFiles.files = fileListTransfer.files;

                    updateRetainedImages();
                });
            };

            reader.readAsDataURL(file);
        }
    };

    // Add event listener for file input
    productImageInputFiles.addEventListener("change", (event) => {
        const files = event.target.files;

        for (let i = 0; i < files.length; i++) {
            fileListTransfer.items.add(files[i]);
        }

        productImageInputFiles.files = fileListTransfer.files;

        renderImageFiles(files);

        // Update retained images
        updateRetainedImages();
    });

    // Thumbnail image logic
    productImageThumbnailInputFile.addEventListener("change", (event) => {
        const file = event.target.files[0];

        if (!file) {
            return;
        }

        const url = URL.createObjectURL(file);

        const lis = productImageThumbnailUpload.querySelectorAll("li");

        lis.forEach((li) => {
            li.remove();
        });

        const li = document.createElement("li");
        li.innerHTML = `
            <div class="preview-image relative group border rounded-2xl h-full">
                <div class="aspect-h-1 aspect-w-1 w-full h-full overflow-hidden rounded-2xl xl:aspect-h-8 xl:aspect-w-7">
                    <img src="${url}" class="h-[400px] w-full object-cover object-center group-hover:opacity-75" />
                </div>
                <button data-url="${url}" type="button" class="btn-remove-thumbnail-image btn btn-circle btn-sm absolute top-2 right-2 bg-white bg-opacity-50 rounded-full">
                    <i class="bx bx-x"></i>
                </button>
            </div>
        `;

        productImageThumbnailUpload.appendChild(li);

        const removeBtn = li.querySelector(".btn-remove-thumbnail-image");

        removeBtn.addEventListener("click", function () {
            const url = this.getAttribute("data-url");

            URL.revokeObjectURL(url);

            this.closest("li").remove();

            productImageThumbnailInputFile.value = null;
        });
    });

    // Add remove preview image functionality for existing images
    const removePreviewBtns = document.querySelectorAll(".btn-remove-preview-image");
    removePreviewBtns.forEach((btn) => {
        btn.addEventListener("click", function () {
            const parent = this.closest("li");
            parent.remove();

            // Update retained images
            updateRetainedImages();
        });
    });
</script>

 
 <!-- Sizes -->
 <script>
     // Toggle disable input price size
     const sizeList = document.getElementById("size-list");
     const sizeCheckboxes = sizeList.querySelectorAll("input[type='checkbox']");
 
     sizeCheckboxes.forEach(checkbox => {
         checkbox.addEventListener("change", function(event) {
             const isChecked = this.checked;
             const inputPrice = checkbox.closest("li").querySelector("input[type='text']:not([hidden])");
 
             inputPrice.disabled = !isChecked;
 
             // Focus input price
             if (isChecked) {
                 inputPrice.focus();
             }
         });
 
         // Get price input
         const inputPrice = checkbox.closest("li").querySelector("input[type='text']:not([hidden])");

         // Set value for price input
         const sizePrice = inputPrice.getAttribute("data-sizePrice");

        if (sizePrice) {
            inputPrice.value = Number(sizePrice).toLocaleString("vi-VN", {
                style: "currency",
                currency: "VND",
            }).replace('₫', '').trim();

            // Remove disabled
            inputPrice.disabled = false;
        }
 
         // Format price input
         inputPrice.addEventListener("input", formatVNCurrency);
     });
 
     function formatVNCurrency() {
         let value = this.value.replace(/[^0-9]/g, '');
         const numericValue = Number(value);
 
         if (isNaN(numericValue)) {
             this.value = ''; 
             return;
         } 
 
         this.value = numericValue.toLocaleString("vi-VN", {
             style: "currency",
             currency: "VND",
         }).replace('₫', '').trim();
 
         // Update hidden input
         const hiddenInput = this.closest("li").querySelector("[hidden]");
         hiddenInput.value = numericValue;
 
     }
         
 
 </script>